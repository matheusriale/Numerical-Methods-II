# -*- coding: utf-8 -*-
"""MN2Tarefa10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Az9HJaP-EVeGOTMZM7L34mYRVNFbojzc
"""

import numpy as np
import math

def met_potencia(autovalor1,vk_novo,error,A):
  x1_velho = [0]*len(vk_novo)
  while True:
    autovalor0 = autovalor1 #Step 4
    vk_velho = vk_novo.copy() #Step 5
    x1_velho = normalize(vk_velho) #Step 6
    vk_novo = np.dot(A,x1_velho)#Step 7 
    autovalor1 = np.dot(np.transpose(x1_velho),vk_novo) #Step 8
    if (abs((autovalor1 - autovalor0)/autovalor1) <= error): #Step 9
      break 
    vetor = [autovalor1, x1_velho]
  return vetor #Step 10



def normalize(vk_velho):
  n = len(vk_velho)
  valor = 0
  vetor = [0]*n
  for i in range(0,n):
    valor = valor + vk_velho[i]**2
  valor = math.sqrt(valor)
  for i in range(0,n):
    vetor[i] = vk_velho[i]/valor
  return vetor



A = [[5,2,1],
     [2,3,1],
     [1,1,2]]


A2 = [[40,8,4,2,1]
     ,[8,30,12,6,2]
     ,[4,12,20,1,2],
      [2,6,1,25,4],
      [1,2,2,4,5]]

v0 = [1,1,1] 
error = 0.001

#Step 1
n = 3 #dimensao da matriz quadrada
autovalor1 = 0 #Step 2
vk_novo = v0 #Step 3
vetor = met_potencia(autovalor1,vk_novo,error,A)

print("------------Matriz A--------------")
print("Autovalor dominante:", vetor[0])
print("Autovetor:", vetor[1])

#PARA MATRIZ A2

vk_novo2 = [1,1,1,1,1] 
vetor2 = met_potencia(autovalor1,vk_novo2,error,A2)

print("------------Matriz A2--------------")
print("Autovalor dominante:", vetor2[0])
print("Autovetor:", vetor2[1])